local debugger = require('debugger.debugger')
debugger.start()



go.property('pizzas_to_pickup', 0)

function contains(tbl, el)
  for _, value in ipairs(tbl) do
    if el == value then
      return true
    end
  end
  return false
end


local function requested_pizza(self)
  local building_id = '/map/building' .. (math.random(self.buildings_count) - 1)
  -- while self.waiting_delivery[hash(building_id)] do
  while contains(self.waiting_delivery, hash(building_id)) do
    building_id = '/map/building' .. (math.random(self.buildings_count) - 1)
  end


  table.insert(self.waiting_delivery, hash(building_id))
  self.pizzas_to_pickup = self.pizzas_to_pickup + 1
  msg.post(building_id .. '#building' , 'requested_pizza')
  msg.post("#pizzas_to_pickup_label", "set_text", {text = "" .. self.pizzas_to_pickup})
  msg.post('/interface#player_gui', "update_waiting_count",
    { waiting_count = #self.waiting_delivery, building_count = self.buildings_count })
end

local function delivered_pizza(self, building_id)
  for index, value in ipairs(self.waiting_delivery) do
    -- print(value, building_id, value == building_id)
    if value == building_id then
      table.remove(self.waiting_delivery, index)
      break
    end
  end

  msg.post('/interface#player_gui', "update_waiting_count",
    { waiting_count = #self.waiting_delivery, building_count = self.buildings_count })
end

local function pizza_order_timer_cb(self, handle, elapsed)
  if math.random() > 0.5 then
    requested_pizza(self)
  end
end

local function check_win(self, pizza_count)
  local w = #self.waiting_delivery

  if w == 0 and pizza_count == 0 then
    print('WIN!')
    msg.post('/interface#player_gui', "end_session")
  end
end

function init(self)

  self.buildings_count = 44
  self.waiting_delivery = {}
  -- go.set("#pizzas_to_pickup_label", "Text", self.pizzas_to_pickup)
  -- go.set_text("#pizzas_to_pickup_label", self.pizzas_to_pickup)

  -- for i = 1, 3, 1 do
  --   requested_pizza(self)
  -- end
  requested_pizza(self)

  -- for index, b in ipairs(self.waiting_delivery) do
  --   print(b)
  -- end
end

function on_message(self, message_id, message, sender)

  if message_id == hash('picked_up_pizzas') then
    -- print('got pizza_pickup message', message)
    self.pizzas_to_pickup = self.pizzas_to_pickup - message.amount
    msg.post("#pizzas_to_pickup_label", "set_text", {text = "" .. self.pizzas_to_pickup})
  end

  if message_id == hash('pizza_delivered') then
    print('pizza_delivered sender', sender)
      delivered_pizza(self, message.building_id)
  end

  if message_id == hash('pizza_count_update') then
    -- check_win(self, message.pizza_count)
    timer.delay(0.2, false, function() check_win(self, message.pizza_count) end)
  end

  if message_id == hash('start_session') then
    self.pizza_order_timer = timer.delay(200, true, pizza_order_timer_cb)
  end
end
