local function set_pizza_count(self, num)
  self.pizza_count = num 
  msg.post('/interface#player_gui', "update_pizza_count", { pizza_count = self.pizza_count })
end

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
  -- local to = vmath.vector3(300, 500, 0)
  -- go.animate(".", "position", go.PLAYBACK_LOOP_PINGPONG, to, go.EASING_OUTSINE, 1)
  self.max_pizzas = 8
  set_pizza_count(self, 0)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

  
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)

  -- pickup pizzas
  if message_id == hash("trigger_response") then
    print(message.other_id, message.other_group)
    if message.other_id == hash('/main') then
      if message.enter then
        local ptp = go.get('/main#main', 'pizzas_to_pickup')
        local log = ptp .. ' pizzas to pickup.'
        local cap = self.max_pizzas - self.pizza_count
        ptp = math.min(cap, ptp)
        log = log .. ' Picking up ' .. ptp
        print(log)
        msg.post('/main#main', 'picked_up_pizzas', {amount=ptp})
        set_pizza_count(self, self.pizza_count + ptp)
      end
    end

    if message.other_group == hash('target') and message.enter then
      print('reached target')
      if self.pizza_count > 0 then
        set_pizza_count(self, self.pizza_count - 1)
        go.delete(message.other_id)
        msg.post('/main#main', 'pizza_count_update', { pizza_count = self.pizza_count })
      else
        sound.play("#dud")
      end
    end
  end

  -- if message_id == hash('reached_target') then
  --   print('reached target')
  --   if self.pizza_count > 0 then
  --     set_pizza_count(self, self.pizza_count - 1)
  --     go.delete(sender)
  --   end
  -- end


end
